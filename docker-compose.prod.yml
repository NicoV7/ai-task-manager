version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-taskmanager_prod}
      POSTGRES_USER: ${DB_USER:-taskmanager_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-taskmanager_user} -d ${DB_NAME:-taskmanager_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for WebSocket scaling
  redis:
    image: redis:7-alpine
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend (Production)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://${DB_USER:-taskmanager_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-taskmanager_prod}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-yourdomain.com,www.yourdomain.com}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-https://yourdomain.com,https://www.yourdomain.com}
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT:-True}
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE:-True}
      - CSRF_COOKIE_SECURE=${CSRF_COOKIE_SECURE:-True}
      - EMAIL_BACKEND=${EMAIL_BACKEND:-django.core.mail.backends.smtp.EmailBackend}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-True}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-https://yourdomain.com/api}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-wss://yourdomain.com/ws}
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup service for database
  backup:
    image: postgres:15-alpine
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - backup_scripts:/scripts
    depends_on:
      - db
    networks:
      - app-network
    restart: "no"
    profiles:
      - backup
    command: >
      sh -c "
        while true; do
          pg_dump -h db -U ${DB_USER:-taskmanager_user} -d ${DB_NAME:-taskmanager_prod} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name '*.sql' -mtime +7 -delete
          sleep 86400
        done
      "

volumes:
  postgres_data_prod:
  static_volume:
  media_volume:
  nginx_logs:
  backup_scripts:

networks:
  app-network:
    driver: bridge